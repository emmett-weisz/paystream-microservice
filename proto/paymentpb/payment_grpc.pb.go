// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: payment.proto

package paymentpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentVerifier_VerifyPayment_FullMethodName = "/payment.PaymentVerifier/VerifyPayment"
)

// PaymentVerifierClient is the client API for PaymentVerifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition
type PaymentVerifierClient interface {
	// gRPC method: verify and emit to Kafka
	VerifyPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
}

type paymentVerifierClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentVerifierClient(cc grpc.ClientConnInterface) PaymentVerifierClient {
	return &paymentVerifierClient{cc}
}

func (c *paymentVerifierClient) VerifyPayment(ctx context.Context, in *PaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, PaymentVerifier_VerifyPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentVerifierServer is the server API for PaymentVerifier service.
// All implementations must embed UnimplementedPaymentVerifierServer
// for forward compatibility.
//
// Service definition
type PaymentVerifierServer interface {
	// gRPC method: verify and emit to Kafka
	VerifyPayment(context.Context, *PaymentRequest) (*PaymentResponse, error)
	mustEmbedUnimplementedPaymentVerifierServer()
}

// UnimplementedPaymentVerifierServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentVerifierServer struct{}

func (UnimplementedPaymentVerifierServer) VerifyPayment(context.Context, *PaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPayment not implemented")
}
func (UnimplementedPaymentVerifierServer) mustEmbedUnimplementedPaymentVerifierServer() {}
func (UnimplementedPaymentVerifierServer) testEmbeddedByValue()                         {}

// UnsafePaymentVerifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentVerifierServer will
// result in compilation errors.
type UnsafePaymentVerifierServer interface {
	mustEmbedUnimplementedPaymentVerifierServer()
}

func RegisterPaymentVerifierServer(s grpc.ServiceRegistrar, srv PaymentVerifierServer) {
	// If the following call pancis, it indicates UnimplementedPaymentVerifierServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentVerifier_ServiceDesc, srv)
}

func _PaymentVerifier_VerifyPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentVerifierServer).VerifyPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentVerifier_VerifyPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentVerifierServer).VerifyPayment(ctx, req.(*PaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentVerifier_ServiceDesc is the grpc.ServiceDesc for PaymentVerifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentVerifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentVerifier",
	HandlerType: (*PaymentVerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyPayment",
			Handler:    _PaymentVerifier_VerifyPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment.proto",
}
